import { ColumnDef } from '@tanstack/react-table'
import { GlobeIcon, LockIcon, StarsIcon } from 'lucide-react'
import { Group, GroupOrder, User } from '@repo/codegen/src/schema'
import AvatarList from '@/components/shared/avatar-list/avatar-list'
import { Badge } from '@repo/ui/badge'

export const getGroupTableColumns = () => {
  const columns: ColumnDef<Group>[] = [
    {
      header: 'Name',
      accessorKey: 'name',
      cell: ({ row }) => {
        const isAutoGenerated = row.original.isManaged

        return (
          <div className="flex gap-2">
            {isAutoGenerated ? (
              <div className="flex gap-1 ">
                <StarsIcon className="mt-0.5" width={16} height={16} />
                <div className="flex flex-col gap-1 ">
                  <span className="text-sm whitespace-nowrap">{row.getValue('name')}</span>
                  <p className="text-xs text-text-light">Prebuilt</p>
                </div>
              </div>
            ) : (
              <span>{row.getValue('name')}</span>
            )}
          </div>
        )
      },
    },
    {
      header: 'Description',
      accessorKey: 'description',
      cell: ({ row }) => (
        <div>
          <p>{row.getValue('description')}</p>
          {!!row.original?.tags?.length && (
            <div className="mt-2 border-t border-dashed pt-2 flex flex-wrap gap-2">
              {row.original.tags.map((tag: string, index: number) => (
                <Badge key={index} variant="outline">
                  {tag}
                </Badge>
              ))}
            </div>
          )}
        </div>
      ),
    },
    {
      header: 'Visibility',
      accessorKey: 'visibility',
      cell: ({ row }) => {
        const value = row.original.setting?.visibility!
        return (
          <span className="flex items-center gap-2 capitalize">
            {value === 'PUBLIC' ? <GlobeIcon height={18} /> : <LockIcon height={18} />}
            {value.toLowerCase()}
          </span>
        )
      },
    },
    {
      header: 'Members',
      accessorKey: 'members',
      cell: ({ row }) => {
        const members = row.original.members.edges?.map((user) => user?.node?.user as User) || []

        return (
          <div className="flex items-center gap-2">
            {members && members.length > 0 ? (
              <AvatarList
                max={10}
                data={members.map((user) => ({
                  id: user.id,
                  imageUrl: user.avatarFile?.presignedURL ?? user.avatarRemoteURL ?? undefined,
                  fallback: user.firstName?.substring(0, 2) ?? undefined,
                  displayName: user?.displayName ?? undefined,
                }))}
              />
            ) : (
              <span className="text-gray-500">No members</span>
            )}
          </div>
        )
      },
    },
  ]

  const mappedColumns = columns
    .filter((column): column is { accessorKey: string; header: string } => 'accessorKey' in column && typeof column.accessorKey === 'string' && 'header' in column && typeof column.header === 'string')
    .map((column) => ({
      accessorKey: column.accessorKey,
      header: column.header,
    }))

  return { columns, mappedColumns }
}
