'use client'
import React, { useEffect, useMemo, useState } from 'react'
import { PageHeading } from '@repo/ui/page-heading'
import GroupsTable from '@/components/pages/protected/groups/components/groups-table'
import { SearchIcon } from 'lucide-react'
import { Checkbox } from '@repo/ui/checkbox'
import { GetAllGroupsQueryVariables, GroupSettingVisibility, GroupWhereInput } from '@repo/codegen/src/schema'
import CreateGroupDialog from './components/dialogs/create-group-dialog'
import GroupDetailsSheet from './components/group-details-sheet'
import { Input } from '@repo/ui/input'
import { TableFilter } from '@/components/shared/table-filter/table-filter'
import { FilterField } from '@/types'
import { useSession } from 'next-auth/react'
import { useDebounce } from '@uidotdev/usehooks'
import { TPagination } from '@repo/ui/pagination-types'
import { DEFAULT_PAGINATION } from '@/constants/pagination'
import GroupInfiniteCards from '@/components/pages/protected/groups/components/group-infinite-cards.tsx'
import { Button } from '@repo/ui/button'
import { PlusCircle } from 'lucide-react'
import { VisibilityState } from '@tanstack/react-table'
import { getGroupTableColumns } from './table/columns'
import ColumnVisibilityMenu from '@/components/shared/column-visibility-menu/column-visibility-menu'
import { BreadcrumbContext } from '@/providers/BreadcrumbContext'
import TableCardView from '@/components/shared/table-card-view/table-card-view'
import { canCreate } from '@/lib/authz/utils'
import { AccessEnum } from '@/lib/authz/enums/access-enum'
import { Label } from '@repo/ui/label'
import { TableFilterKeysEnum } from '@/components/shared/table-filter/table-filter-keys.ts'
import { useOrganizationRoles } from '@/lib/query-hooks/permissions'
import { FilterIcons } from '@/components/shared/enum-mapper/groups-enum'
import { whereGenerator } from '@/components/shared/table-filter/where-generator'

const filterFields: FilterField[] = [
  {
    key: 'visibilityIn',
    label: 'Visibility',
    type: 'multiselect',
    icon: FilterIcons.Visibility,
    options: [
      { label: 'Public', value: GroupSettingVisibility.PUBLIC },
      { label: 'Private', value: GroupSettingVisibility.PRIVATE },
    ],
  },
]

const GroupsPage = () => {
  const [activeTab, setActiveTab] = useState<'table' | 'card'>('table')
  const [whereFilters, setWhereFilters] = useState<GroupWhereInput | null>(null)
  const [orderBy, setOrderBy] = useState<GetAllGroupsQueryVariables['orderBy']>()
  const [searchQuery, setSearchQuery] = useState('')
  const { data: session } = useSession()
  const debouncedSearchQuery = useDebounce(searchQuery, 300)
  const [showAutoGenerated, setShowAutoGenerated] = useState<boolean>(false)
  const [pagination, setPagination] = useState<TPagination>(DEFAULT_PAGINATION)
  const [columnVisibility, setColumnVisibility] = useState<VisibilityState>({ updatedAt: false, updatedBy: false, createdAt: false, createdBy: false })
  const [showMyGroups, setShowMyGroups] = useState<boolean>(false)
  const { setCrumbs } = React.useContext(BreadcrumbContext)
  const { data: permissions } = useOrganizationRoles()

  const whereFilter = useMemo(() => {
    const mapCustomKey = (key: string, value: unknown): GroupWhereInput => {
      if (key === 'visibilityIn') {
        return {
          hasSettingWith: [
            {
              visibilityIn: value as GroupSettingVisibility[],
            },
          ],
        }
      }

      return { [key]: value } as GroupWhereInput
    }
    const baseWhere = whereGenerator<GroupWhereInput>(whereFilters, mapCustomKey)

    const conditions: GroupWhereInput = {
      ...(showMyGroups && session ? { hasMembersWith: [{ userID: session.user?.userId ?? '' }] } : {}),
      ...(!showAutoGenerated ? { isManaged: false } : {}),
      ...baseWhere,
      nameContainsFold: debouncedSearchQuery,
    }

    return conditions
  }, [whereFilters, showMyGroups, session, showAutoGenerated, debouncedSearchQuery])

  const orderByFilter = useMemo(() => {
    return orderBy || undefined
  }, [orderBy])

  const { mappedColumns } = getGroupTableColumns({})

  useEffect(() => {
    setCrumbs([{ label: 'Home', href: '/dashboard' }, { label: 'User Management' }, { label: 'Groups', href: '/user-management/groups' }])
  }, [setCrumbs])

  return (
    <>
      <PageHeading eyebrow="user management" heading={'Groups'} />
      <div className="flex items-center gap-2 my-2">
        <Input
          value={searchQuery}
          name="groupSearch"
          placeholder="Search..."
          onChange={(e) => setSearchQuery(e.currentTarget.value)}
          icon={<SearchIcon width={17} />}
          iconPosition="left"
          variant="searchTable"
        />
        <TableCardView activeTab={activeTab} onTabChange={setActiveTab}></TableCardView>

        <Checkbox id="auto-gen-group" checked={showAutoGenerated} onCheckedChange={(val: boolean) => setShowAutoGenerated(val)} />
        <Label htmlFor="auto-gen-group" className="cursor-pointer select-none">
          Show auto generated group
        </Label>
        <Checkbox id="my-groups" checked={showMyGroups} onCheckedChange={(val: boolean) => setShowMyGroups(val)} />
        <Label htmlFor="my-groups" className="cursor-pointer select-none">
          Show my groups
        </Label>
        <div className="grow flex flex-row items-center gap-2 justify-end">
          {mappedColumns && columnVisibility && setColumnVisibility && (
            <ColumnVisibilityMenu mappedColumns={mappedColumns} columnVisibility={columnVisibility} setColumnVisibility={setColumnVisibility}></ColumnVisibilityMenu>
          )}
          <TableFilter filterFields={filterFields} onFilterChange={setWhereFilters} pageKey={TableFilterKeysEnum.GROUP} />
          {canCreate(permissions?.roles, AccessEnum.CanCreateGroup) && (
            <CreateGroupDialog
              trigger={
                <Button className="h-8 !px-2" icon={<PlusCircle />} iconPosition="left">
                  Create
                </Button>
              }
            />
          )}
        </div>
      </div>

      {activeTab === 'table' ? (
        <GroupsTable
          key="table"
          onSortChange={setOrderBy}
          whereFilter={whereFilter}
          orderByFilter={orderByFilter}
          pagination={pagination}
          onPaginationChange={(pagination: TPagination) => setPagination(pagination)}
          columnVisibility={columnVisibility}
          setColumnVisibility={setColumnVisibility}
        />
      ) : (
        <GroupInfiniteCards whereFilter={whereFilter} orderByFilter={orderByFilter} />
      )}

      <GroupDetailsSheet />
    </>
  )
}

export default GroupsPage
