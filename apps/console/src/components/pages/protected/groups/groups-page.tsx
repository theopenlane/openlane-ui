'use client'
import React, { useMemo, useState } from 'react'
import { PageHeading } from '@repo/ui/page-heading'
import GroupsTable from '@/components/pages/protected/groups/components/groups-table'
import { CreditCard as CardIcon, SearchIcon, Table as TableIcon } from 'lucide-react'
import GroupsCard from '@/components/pages/protected/groups/components/groups-cards'
import { Checkbox } from '@repo/ui/checkbox'
import { GetAllGroupsQueryVariables, GroupSettingVisibility } from '@repo/codegen/src/schema'
import CreateGroupDialog from './components/dialogs/create-group-dialog'
import GroupDetailsSheet from './components/group-details-sheet'
import { Input } from '@repo/ui/input'
import { TableFilter } from '@/components/shared/table-filter/table-filter'
import { FilterField, SelectFilterField } from '@/types'
import { useSession } from 'next-auth/react'
import { useDebounce } from '@uidotdev/usehooks'
import { useGetAllGroups } from '@/lib/graphql-hooks/groups'
import { TPagination } from '@repo/ui/pagination-types'
import { DEFAULT_PAGINATION } from '@/constants/pagination'

const filterFields: FilterField[] = [
  { key: 'name', label: 'Name', type: 'text' },
  {
    key: 'visibility',
    label: 'Visibility',
    type: 'select',
    options: [
      { label: 'Public', value: GroupSettingVisibility.PUBLIC },
      { label: 'Private', value: GroupSettingVisibility.PRIVATE },
    ],
  } as SelectFilterField,
]

const GroupsPage = () => {
  const [activeTab, setActiveTab] = useState<'table' | 'card'>('table')
  const [whereFilters, setWhereFilters] = useState<Record<string, any>>({})
  const [orderBy, setOrderBy] = useState<GetAllGroupsQueryVariables['orderBy']>()
  const [searchQuery, setSearchQuery] = useState('')
  const { data: session } = useSession()
  const debouncedSearchQuery = useDebounce(searchQuery, 300)
  const [showAutoGenerated, setShowAutoGenerated] = useState<boolean>(true)
  const [pagination, setPagination] = useState<TPagination>(DEFAULT_PAGINATION)

  const IsMyGroups = false
  const whereFilter = useMemo(() => {
    const conditions: Record<string, any> = {
      ...(IsMyGroups && session ? { hasMembersWith: [{ userID: session.user?.userId || '' }] } : {}),
      ...(!showAutoGenerated ? { isManaged: false } : {}),
      ...whereFilters,
      nameContainsFold: debouncedSearchQuery,
    }

    return conditions
  }, [IsMyGroups, session, showAutoGenerated, debouncedSearchQuery, whereFilters])

  const orderByFilter = useMemo(() => {
    return orderBy || undefined
  }, [orderBy])

  const paginationMap = activeTab === 'table' ? pagination : DEFAULT_PAGINATION

  const {
    groups,
    isLoading: isPending,
    isError,
    paginationMeta,
  } = useGetAllGroups({
    where: whereFilter,
    orderBy: orderByFilter,
    pagination: paginationMap,
  })

  return (
    <>
      <PageHeading heading={'Groups'} />
      <div className="flex justify-between">
        <div className="flex items-center gap-5">
          <div className="flex gap-1 size-fit bg-transparent py-0.5 px-1 border rounded-md">
            <div className={`py-1.5 px-2.5 rounded-md cursor-pointer ${activeTab === 'table' ? 'bg-card' : 'bg-transparent'}`} onClick={() => setActiveTab('table')}>
              <TableIcon size={16} />
            </div>
            <div className={`py-1.5 px-2.5 rounded-md cursor-pointer ${activeTab === 'card' ? 'bg-card' : 'bg-transparent'}`} onClick={() => setActiveTab('card')}>
              <CardIcon size={16} />
            </div>
          </div>
          <TableFilter filterFields={filterFields} onFilterChange={setWhereFilters} />
          <Input
            value={searchQuery}
            name="groupSearch"
            placeholder="Search..."
            onChange={(e) => setSearchQuery(e.currentTarget.value)}
            icon={<SearchIcon width={17} />}
            iconPosition="left"
            variant="searchTable"
          />
          <div className="flex gap-2">
            <Checkbox checked={showAutoGenerated} onCheckedChange={(val: boolean) => setShowAutoGenerated(val)} />
            <p>Show auto generated group</p>
          </div>
        </div>
        <CreateGroupDialog />
      </div>

      {activeTab === 'table' ? (
        <GroupsTable
          groups={groups}
          isError={isError}
          onSortChange={setOrderBy}
          pagination={pagination}
          onPaginationChange={(pagination: TPagination) => setPagination(pagination)}
          paginationMeta={paginationMeta}
        />
      ) : (
        <GroupsCard isError={isError} isPending={isPending} groups={groups} />
      )}
      <GroupDetailsSheet />
    </>
  )
}

export default GroupsPage
