'use client'
import React, { useMemo, useState, useEffect } from 'react'
import { PageHeading } from '@repo/ui/page-heading'
import GroupsTable from '@/components/pages/protected/groups/components/groups-table'
import { CirclePlus, SearchIcon } from 'lucide-react'
import { Checkbox } from '@repo/ui/checkbox'
import { GetAllGroupsQueryVariables, GroupSettingVisibility, GroupWhereInput } from '@repo/codegen/src/schema'
import CreateGroupDialog from './components/dialogs/create-group-dialog'
import GroupDetailsSheet from './components/group-details-sheet'
import { Input } from '@repo/ui/input'
import { TableFilter } from '@/components/shared/table-filter/table-filter'
import { FilterField, SelectFilterField } from '@/types'
import { useSession } from 'next-auth/react'
import { useDebounce } from '@uidotdev/usehooks'
import { TPagination } from '@repo/ui/pagination-types'
import { DEFAULT_PAGINATION } from '@/constants/pagination'
import GroupInfiniteCards from '@/components/pages/protected/groups/components/group-infinite-cards.tsx'
import Menu from '@/components/shared/menu/menu.tsx'
import { CreateBtn } from '@/components/shared/enum-mapper/common-enum'
import { VisibilityState } from '@tanstack/react-table'
import { getGroupTableColumns } from './table/columns'
import ColumnVisibilityMenu from '@/components/shared/column-visibility-menu/column-visibility-menu'
import { BreadcrumbContext } from '@/providers/BreadcrumbContext'
import TableCardView from '@/components/shared/table-card-view/table-card-view'
import { useOrganizationRole } from '@/lib/authz/access-api'
import { canCreate } from '@/lib/authz/utils'
import { AccessEnum } from '@/lib/authz/enums/access-enum'
import { Label } from '@repo/ui/label'

const filterFields: FilterField[] = [
  { key: 'name', label: 'Name', type: 'text' },
  {
    key: 'visibility',
    label: 'Visibility',
    type: 'select',
    options: [
      { label: 'Public', value: GroupSettingVisibility.PUBLIC },
      { label: 'Private', value: GroupSettingVisibility.PRIVATE },
    ],
  } as SelectFilterField,
]

const GroupsPage = () => {
  const [activeTab, setActiveTab] = useState<'table' | 'card'>('table')
  const [whereFilters, setWhereFilters] = useState<GroupWhereInput | null>(null)
  const [orderBy, setOrderBy] = useState<GetAllGroupsQueryVariables['orderBy']>()
  const [searchQuery, setSearchQuery] = useState('')
  const { data: session } = useSession()
  const debouncedSearchQuery = useDebounce(searchQuery, 300)
  const [showAutoGenerated, setShowAutoGenerated] = useState<boolean>(true)
  const [pagination, setPagination] = useState<TPagination>(DEFAULT_PAGINATION)
  const [columnVisibility, setColumnVisibility] = useState<VisibilityState>({ updatedAt: false, updatedBy: false, createdAt: false, createdBy: false })
  const [showMyGroups, setShowMyGroups] = useState<boolean>(false)
  const { setCrumbs } = React.useContext(BreadcrumbContext)
  const { data: permissions } = useOrganizationRole(session)

  useEffect(() => {
    setCrumbs([
      { label: 'Home', href: '/dashboard' },
      { label: 'Groups', href: '/groups' },
    ])
  }, [setCrumbs])

  const whereFilter = useMemo(() => {
    if (!whereFilters) {
      return null
    }
    const modifiedWhereFilters = { ...whereFilters }

    if ('visibility' in modifiedWhereFilters) {
      modifiedWhereFilters.hasSettingWith = [{ visibility: modifiedWhereFilters.visibility as GroupSettingVisibility }]
      delete modifiedWhereFilters.visibility
    }

    const conditions: GroupWhereInput = {
      ...(showMyGroups && session ? { hasMembersWith: [{ userID: session.user?.userId || '' }] } : {}),
      ...(!showAutoGenerated ? { isManaged: false } : {}),
      ...modifiedWhereFilters,
      nameContainsFold: debouncedSearchQuery,
    }

    return conditions
  }, [showMyGroups, session, showAutoGenerated, debouncedSearchQuery, whereFilters])

  const orderByFilter = useMemo(() => {
    return orderBy || undefined
  }, [orderBy])

  const { mappedColumns } = getGroupTableColumns({})

  return (
    <>
      <PageHeading heading={'Groups'} />
      <div className="flex items-center gap-2 my-2">
        <TableCardView activeTab={activeTab} onTabChange={setActiveTab}></TableCardView>
        {mappedColumns && columnVisibility && setColumnVisibility && (
          <ColumnVisibilityMenu mappedColumns={mappedColumns} columnVisibility={columnVisibility} setColumnVisibility={setColumnVisibility}></ColumnVisibilityMenu>
        )}
        <TableFilter filterFields={filterFields} onFilterChange={setWhereFilters} />
        <Input
          value={searchQuery}
          name="groupSearch"
          placeholder="Search..."
          onChange={(e) => setSearchQuery(e.currentTarget.value)}
          icon={<SearchIcon width={17} />}
          iconPosition="left"
          variant="searchTable"
        />
        <Checkbox id="auto-gen-group" checked={showAutoGenerated} onCheckedChange={(val: boolean) => setShowAutoGenerated(val)} />
        <Label htmlFor="auto-gen-group" className="cursor-pointer select-none">
          Show auto generated group
        </Label>
        <Checkbox id="my-groups" checked={showMyGroups} onCheckedChange={(val: boolean) => setShowMyGroups(val)} />
        <Label htmlFor="my-groups" className="cursor-pointer select-none">
          Show my groups
        </Label>
        <div className="grow flex flex-row items-center gap-2 justify-end">
          {canCreate(permissions?.roles, AccessEnum.CanCreateGroup) && (
            <Menu
              trigger={CreateBtn}
              content={
                <CreateGroupDialog
                  trigger={
                    <div className="flex items-center space-x-2">
                      <CirclePlus size={16} strokeWidth={2} />
                      <span>Group</span>
                    </div>
                  }
                />
              }
            />
          )}
        </div>
      </div>
      <div id="datatable-filter-portal" />

      {activeTab === 'table' ? (
        <GroupsTable
          key="table"
          onSortChange={setOrderBy}
          whereFilter={whereFilter}
          orderByFilter={orderByFilter}
          pagination={pagination}
          onPaginationChange={(pagination: TPagination) => setPagination(pagination)}
          columnVisibility={columnVisibility}
          setColumnVisibility={setColumnVisibility}
        />
      ) : (
        <GroupInfiniteCards whereFilter={whereFilter} orderByFilter={orderByFilter} />
      )}

      <GroupDetailsSheet />
    </>
  )
}

export default GroupsPage
