'use client'

import { Badge } from '@repo/ui/badge'
import { DataTable } from '@repo/ui/data-table'
import { ColumnDef } from '@tanstack/table-core'
import { GlobeIcon, LockIcon, StarsIcon, Users2Icon } from 'lucide-react'
import React from 'react'
import { Group, GroupSettingVisibility } from '@repo/codegen/src/schema'
import AvatarList from '@/components/shared/avatar-list/avatar-list'
import { TableCell, TableRow } from '@repo/ui/table'
import { groupsTableStyles } from './groups-table-styles'
import { useGroupsStore } from '@/hooks/useGroupsStore'
import { GROUP_SORT_FIELDS } from '@/components/pages/protected/groups/table/table-config.ts'

const columns: ColumnDef<Group>[] = [
  {
    header: 'Name',
    accessorKey: 'name',
    cell: ({ row }) => {
      const isAutoGenerated = row.original.isManaged

      return (
        <div className="flex gap-2">
          {isAutoGenerated ? (
            <div className="flex gap-1 ">
              <StarsIcon className="mt-0.5" width={16} height={16} />
              <div className="flex flex-col gap-1 ">
                <span className="text-sm whitespace-nowrap">{row.getValue('name')}</span>
                <p className="text-xs text-text-light">Prebuilt</p>
              </div>
            </div>
          ) : (
            <span>{row.getValue('name')}</span>
          )}
        </div>
      )
    },
  },
  {
    header: 'Description',
    accessorKey: 'description',
    cell: ({ row }) => (
      <div>
        <p>{row.getValue('description')}</p>
        {!!row.original?.tags?.length && (
          <div className="mt-2 border-t border-dashed pt-2 flex flex-wrap gap-2">
            {row.original.tags.map((tag: string, index: number) => (
              <Badge key={index} variant="outline">
                {tag}
              </Badge>
            ))}
          </div>
        )}
      </div>
    ),
  },
  {
    header: 'Visibility',
    accessorKey: 'visibility',
    cell: ({ row }) => {
      const value = row.original.setting?.visibility!
      return (
        <span className="flex items-center gap-2 capitalize">
          {value === 'PUBLIC' ? <GlobeIcon height={18} /> : <LockIcon height={18} />}
          {value.toLowerCase()}
        </span>
      )
    },
  },
  {
    header: 'Members',
    accessorKey: 'members',
    cell: ({ row }) => {
      const members = row.original.members || []

      return (
        <div className="flex items-center gap-2">
          {members && members.length > 0 ? (
            <AvatarList
              max={10}
              data={members.map((user) => ({
                id: user.user.id,
                imageUrl: user.user.avatarFile?.presignedURL ?? user.user.avatarRemoteURL ?? undefined,
                fallback: user.user.firstName?.substring(0, 2) ?? undefined,
                firstName: user.user.firstName ?? undefined,
                lastName: user.user.lastName ?? undefined,
              }))}
            />
          ) : (
            <span className="text-gray-500">No members</span>
          )}
        </div>
      )
    },
  },
]

interface Props {
  groups: Group[]
  isError: boolean
  onSortChange?: (sortCondition: any[]) => void
}

const GroupsTable = ({ groups, isError, onSortChange }: Props) => {
  const { setSelectedGroup } = useGroupsStore()

  const { tableRow, keyIcon, message } = groupsTableStyles()

  const handleRowClick = (group: Group) => {
    setSelectedGroup(group.id)
  }

  if (isError) return <p className="text-red-500">Error loading groups</p>

  return (
    <div className="mt-5">
      <DataTable
        columns={columns as ColumnDef<Group>[]}
        data={groups}
        onRowClick={handleRowClick}
        sortFields={GROUP_SORT_FIELDS}
        onSortChange={onSortChange}
        noDataMarkup={
          <TableRow className={tableRow()}>
            <TableCell colSpan={columns.length}>
              <div className="flex flex-col justify-center items-center">
                <Users2Icon height={89} width={89} className={keyIcon()} strokeWidth={1} color="#DAE3E7" />
                <p className={message()}>You're not part of any group.</p>
              </div>
            </TableCell>
          </TableRow>
        }
      />
    </div>
  )
}

export default GroupsTable
