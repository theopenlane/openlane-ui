'use client'

import { Badge } from '@repo/ui/badge'
import { DataTable } from '@repo/ui/data-table'
import { ColumnDef } from '@tanstack/table-core'
import { GlobeIcon, LockIcon, SearchIcon, StarsIcon, Users2Icon } from 'lucide-react'
import React, { useMemo, useState } from 'react'
import CreateGroupDialog from '@/components/pages/protected/groups/my-groups/dialogs/create-group-dialog'
import { GroupOrderField, GroupSettingVisibility, GroupWhereInput, useGetAllGroupsQuery } from '@repo/codegen/src/schema'
import { useMyGroupsStore } from '@/hooks/useMyGroupsStore'
import AvatarList from '@/components/shared/avatar-list/avatar-list'
import { TableCell, TableRow } from '@repo/ui/table'
import { usePathname } from 'next/navigation'
import { useSession } from 'next-auth/react'
import { Group } from '../groups-page'
import { myGroupsTableStyles } from './my-groups-table-styles'
import { FilterField, SelectFilterField } from '@/types'
import { DataTableFilterList } from '@/components/shared/table-filter/table-filter'
import { DataTableSortList } from '@/components/shared/table-filter/table-sort'
import { Input } from '@repo/ui/input'
import { useDebounce } from '@uidotdev/usehooks'

const columns: ColumnDef<Group>[] = [
  {
    header: 'Name',
    accessorKey: 'name',
    cell: ({ row }) => {
      const isAutoGenerated = row.original.isManaged

      return (
        <div className="flex gap-2">
          {isAutoGenerated ? (
            <div className="flex gap-1 ">
              <StarsIcon className="mt-0.5" width={16} height={16} />
              <div className="flex flex-col gap-1 ">
                <span className="text-sm whitespace-nowrap">{row.getValue('name')}</span>
                <p className="text-xs text-text-light">Prebuilt</p>
              </div>
            </div>
          ) : (
            <span>{row.getValue('name')}</span>
          )}
        </div>
      )
    },
  },
  {
    header: 'Description',
    accessorKey: 'description',
    cell: ({ row }) => (
      <div>
        <p>{row.getValue('description')}</p>
        {!!row.original.tags.length && (
          <div className="mt-2 border-t border-dashed pt-2 flex flex-wrap gap-2">
            {row.original.tags.map((tag: string, index: number) => (
              <Badge key={index} variant="outline">
                {tag}
              </Badge>
            ))}
          </div>
        )}
      </div>
    ),
  },
  {
    header: 'Visibility',
    accessorKey: 'visibility',
    cell: ({ row }) => {
      const value: GroupSettingVisibility = row.getValue('visibility')
      return (
        <span className="flex items-center gap-2 capitalize">
          {value === 'PUBLIC' ? <GlobeIcon height={18} /> : <LockIcon height={18} />}
          {value.toLowerCase()}
        </span>
      )
    },
  },
  {
    header: 'Members',
    accessorKey: 'members',
    cell: ({ row }) => {
      const members = row.original.members || []

      return (
        <div className="flex items-center gap-2">
          {members.length > 0 ? (
            <AvatarList
              max={10}
              data={members.map((user) => ({
                id: user.user.id,
                imageUrl: user.user.avatarFile?.presignedURL || user.user.avatarRemoteURL,
                fallback: user?.user?.firstName?.substring(0, 2),
                firstName: user.user.firstName,
                lastName: user.user.lastName,
              }))}
            />
          ) : (
            <span className="text-gray-500">No members</span>
          )}
        </div>
      )
    },
  },
]

const filterFields: FilterField[] = [
  { key: 'name', label: 'Name', type: 'text' },
  {
    key: 'visibility',
    label: 'Visibility',
    type: 'select',
    options: [
      { label: 'Public', value: GroupSettingVisibility.PUBLIC },
      { label: 'Private', value: GroupSettingVisibility.PRIVATE },
    ],
  } as SelectFilterField,
]

const MyGroupsTable = () => {
  const { data: session } = useSession()
  const pathname = usePathname()
  const IsMyGroups = useMemo(() => pathname === '/groups/my-groups', [pathname])
  const { showAutoGenerated, setSelectedGroup } = useMyGroupsStore()
  const [searchQuery, setSearchQuery] = useState('')
  const debouncedSearchQuery = useDebounce(searchQuery, 300)

  const [whereFilters, setWhereFilters] = useState<Record<string, any>>({})
  const { tableRow, keyIcon, message } = myGroupsTableStyles()

  const whereFilter = useMemo(() => {
    let conditions: Record<string, any> = IsMyGroups
      ? {
          hasMembersWith: session ? [{ userID: session.user?.userId || '' }] : [],
          ...(showAutoGenerated ? {} : { isManaged: false }),
        }
      : {}

    if (debouncedSearchQuery) {
      conditions.displayNameContainsFold = debouncedSearchQuery
    }

    return { ...conditions, ...whereFilters }
  }, [IsMyGroups, showAutoGenerated, session, whereFilters, debouncedSearchQuery])

  const [{ data: TableData, fetching, error }] = useGetAllGroupsQuery({ variables: { where: whereFilter } })

  const transformedData =
    TableData?.groups?.edges
      ?.map((edge) => edge?.node)
      .filter((group) => !!group)
      .map((group) => ({
        id: group.id,
        name: group.displayName,
        description: group.description || 'No description',
        tags: group.tags || [],
        visibility: group.setting?.visibility || 'UNKNOWN',
        members: group.members || [],
        isManaged: group.isManaged,
      })) || []

  const handleRowClick = (group: Group) => {
    setSelectedGroup(group.id)
  }

  if (error) return <p className="text-red-500">Error loading groups: {error.message}</p>

  return (
    <div className="mt-5">
      <Input
        value={searchQuery}
        name="groupSearch"
        placeholder="Search..."
        className="!bg border"
        onChange={(e) => setSearchQuery(e.currentTarget.value)} // Update the search query on input change
        icon={<SearchIcon width={17} />}
      />
      <DataTableSortList
        sortFields={Object.entries(GroupOrderField).map(([key, value]) => ({
          key: value as GroupOrderField,
          label: key.replace('_', ' '),
        }))}
        onSortChange={(val) => console.log('val', val)}
      />
      <DataTableFilterList filterFields={filterFields} onFilterChange={setWhereFilters} />
      <DataTable
        columns={columns as ColumnDef<Group>[]}
        data={transformedData as Group[]}
        onRowClick={handleRowClick}
        noDataMarkup={
          <TableRow className={tableRow()}>
            <TableCell colSpan={columns.length}>
              <div className="flex flex-col justify-center items-center">
                <Users2Icon height={89} width={89} className={keyIcon()} strokeWidth={1} color="#DAE3E7" />
                <p className={message()}>You're not part of any group.</p>
                <CreateGroupDialog triggerText />
              </div>
            </TableCell>
          </TableRow>
        }
      />
    </div>
  )
}

export default MyGroupsTable
