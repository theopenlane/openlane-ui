'use client'

import { Avatar, AvatarFallback, AvatarImage } from '@repo/ui/avatar'
import { Badge } from '@repo/ui/badge'
import { DataTable } from '@repo/ui/data-table'
import { ColumnDef } from '@tanstack/table-core'
import { GlobeIcon, LockIcon, StarsIcon, Users2Icon } from 'lucide-react'
import React, { useState } from 'react'
import { TableCell, TableRow } from '../../../../../../../../packages/ui/src/table/table'
import { myGroupsTableStyles } from './my-groups-table-styles'
import CreateGroupDialog from '@/components/pages/protected/groups/my-groups/create-group-dialog'
import { GroupSettingVisibility, GroupWhereInput, useGetAllGroupsQuery } from '@repo/codegen/src/schema'
import { Group } from '@/app/(protected)/groups/my-groups/page'

// Columns definition
const columns: ColumnDef<Group>[] = [
  {
    header: 'Name',
    accessorKey: 'name',
    cell: ({ row }) => {
      console.log(row)
      const isAutoGenerated = row.original.isManaged

      return (
        <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>
          {isAutoGenerated ? (
            <div className="flex gap-1 ">
              <StarsIcon className="mt-0.5" width={16} height={16} />
              <div className="flex flex-col gap-1">
                <span className="text-sm">{row.getValue('name')}</span>
                <p className="text-xs text-text-light">Prebuilt</p>
              </div>
            </div>
          ) : (
            <span>{row.getValue('name')}</span>
          )}
        </div>
      )
    },
  },
  {
    header: 'Description',
    accessorKey: 'description',
    cell: ({ row }) => (
      <div>
        <p>{row.getValue('description')}</p>
        {!!row.original.tags.length && (
          <div className="mt-2 border-t border-dashed pt-2 flex flex-wrap gap-2">
            {row.original.tags.map((tag: string, index: number) => (
              <Badge key={index} variant="outline">
                {tag}
              </Badge>
            ))}
          </div>
        )}
      </div>
    ),
  },
  {
    header: 'Visibility',
    accessorKey: 'visibility',
    cell: ({ row }) => {
      const value: GroupSettingVisibility = row.getValue('visibility')
      return (
        <span className="flex items-center gap-2 capitalize">
          {value === 'PUBLIC' ? <GlobeIcon height={18} /> : <LockIcon height={18} />}
          {value.toLowerCase()}
        </span>
      )
    },
  },
  {
    header: 'Members',
    accessorKey: 'members',
    cell: ({ row }) => {
      const members = row.original.members || []

      return (
        <div className="flex items-center gap-2">
          {members.length > 0 ? (
            members.map((member: any, index: number) => {
              const avatarUrl = member.avatarFile?.presignedURL || member.avatarRemoteURL
              return (
                <Avatar key={index} variant="small">
                  {avatarUrl && <AvatarImage src={avatarUrl} />}
                  <AvatarFallback>{member.firstName?.substring(0, 2) || 'U'}</AvatarFallback>
                </Avatar>
              )
            })
          ) : (
            <span className="text-gray-500">No members</span>
          )}
        </div>
      )
    },
  },
]

interface Props {
  showAutoGenerated: boolean
  setSelectedGroup: (group: Group | null) => void
}

const MyGroupsTable = ({ showAutoGenerated, setSelectedGroup }: Props) => {
  const { tableRow, keyIcon, message } = myGroupsTableStyles()

  const whereFilter: GroupWhereInput = {
    isManaged: showAutoGenerated,
  }

  const [{ data: TableData, fetching, error }] = useGetAllGroupsQuery({ variables: { where: whereFilter } })

  // Transform API response to match the table format
  const transformedData =
    TableData?.groups?.edges
      ?.map((edge) => edge?.node)
      .filter((group) => !!group)
      .map((group) => ({
        id: group.id,
        name: group.displayName,
        description: group.description || 'No description',
        tags: group.tags || [],
        visibility: group.setting?.visibility || 'UNKNOWN',
        members: group.members || [],
        isManaged: group.isManaged,
      })) || []

  const handleRowClick = (group: Group) => {
    setSelectedGroup(group)
  }

  if (fetching) return <p>Loading groups...</p>
  if (error) return <p className="text-red-500">Error loading groups: {error.message}</p>

  return (
    <div className="mt-5">
      <DataTable
        columns={columns as ColumnDef<Group>[]}
        data={transformedData as Group[]}
        onRowClick={handleRowClick}
        noDataMarkup={
          <TableRow className={tableRow()}>
            <TableCell colSpan={columns.length}>
              <div className="flex flex-col justify-center items-center">
                <Users2Icon height={89} width={89} className={keyIcon()} strokeWidth={1} color="#DAE3E7" />
                <p className={message()}>You're not part of any group.</p>
                <CreateGroupDialog triggerText />
              </div>
            </TableCell>
          </TableRow>
        }
      />
    </div>
  )
}

export default MyGroupsTable
