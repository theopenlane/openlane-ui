import { useMutation, useQuery } from '@tanstack/react-query'
import { useGraphQLClient } from '@/hooks/useGraphQLClient'

// Import the GraphQL query
import { CREATE_CONTROL_OBJECTIVE, GET_ALL_CONTROL_OBJECTIVES } from '@repo/codegen/query/control-objective'

// Types generated by your GraphQL Codegen
import { CreateControlObjectiveInput, CreateControlObjectiveMutation, GetAllControlObjectivesQuery, GetAllControlObjectivesQueryVariables } from '@repo/codegen/src/schema'

/**
 * A hook to fetch all Control Objectives, optionally passing a filter (`where`).
 */
export const useGetAllControlObjectives = (where?: GetAllControlObjectivesQueryVariables['where']) => {
  const { client } = useGraphQLClient()

  return useQuery<GetAllControlObjectivesQuery>({
    queryKey: ['controlObjectives', where],
    queryFn: () => client.request(GET_ALL_CONTROL_OBJECTIVES, { where }),
  })
}

export const useCreateControlObjective = () => {
  const { client, queryClient } = useGraphQLClient()

  return useMutation<CreateControlObjectiveMutation, Error, CreateControlObjectiveInput>({
    mutationFn: (input) => client.request(CREATE_CONTROL_OBJECTIVE, { input }),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['controlObjectives'] })
    },
  })
}
